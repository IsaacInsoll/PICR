type AccessLog {
  folder: Folder
  folderId: ID
  id: ID!
  ipAddress: String
  timestamp: DateTime!
  type: AccessType!
  user: User
  userAgent: String
  userId: ID
}

enum AccessType {
  Download
  View
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Branding {
  folder: Folder
  folderId: ID!
  id: ID!
  logoUrl: String
  mode: ThemeMode
  primaryColor: PrimaryColor
}

type ClientInfo {
  avifEnabled: Boolean!
  canWrite: Boolean!
}

type Comment {
  comment: String
  file: File
  id: ID
  systemGenerated: Boolean!
  timestamp: DateTime!
  user: User
  userId: ID
}

enum CommentPermissions {
  edit
  none
  read
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type File implements FileInterface {
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  flag: FileFlag
  folder: Folder
  folderId: ID!
  id: ID!
  latestComment: DateTime
  name: String!
  rating: Int
  totalComments: Int
  type: FileType!
}

enum FileFlag {
  approved
  none
  rejected
}

interface FileInterface {
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  flag: FileFlag
  folder: Folder
  folderId: ID!
  id: ID!
  latestComment: DateTime
  name: String!
  rating: Int
  totalComments: Int
  type: FileType!
}

enum FileType {
  File
  Image
  Video
}

type Folder {
  branding: Branding
  files: [FileInterface!]!
  folderLastModified: DateTime!
  heroImage: Image
  id: ID!
  name: String!
  parentId: ID
  parents: [Folder!]!
  permissions: FolderPermissions
  subFolders: [Folder!]!
  totalDirectSize: String!
  totalFiles: Int!
  totalFolders: Int!
  totalImages: Int!
  totalSize: String!
  users: [User!]
}

enum FolderPermissions {
  Admin
  None
  View
}

enum FoldersSortType {
  folderLastModified
  name
}

type Image implements FileInterface {
  blurHash: String!
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  flag: FileFlag
  folder: Folder
  folderId: ID!
  id: ID!
  imageRatio: Float
  latestComment: DateTime
  metadata: ImageMetadataSummary
  name: String!
  rating: Int
  totalComments: Int
  type: FileType!
}

type ImageMetadataSummary {
  Aperture: Float
  Artist: String
  Camera: String
  DateTimeEdit: String
  DateTimeOriginal: String
  ExposureTime: Float
  Height: Int
  ISO: Float
  Lens: String
  Rating: Int
  Width: Int
}

type Mutation {
  addComment(comment: String, flag: FileFlag, id: ID!, nickName: String, rating: Int): FileInterface!
  auth(password: String!, user: String!): String!
  deleteBranding(folderId: ID!): Folder!
  editAdminUser(commentPermissions: CommentPermissions, enabled: Boolean, folderId: ID, id: ID, name: String, ntfy: String, password: String, username: String): User!
  editBranding(folderId: ID!, logoUrl: String, mode: ThemeMode, primaryColor: PrimaryColor): Folder!
  editFolder(folderId: ID!, heroImageId: ID): Folder!
  editUser(commentPermissions: CommentPermissions, enabled: Boolean, folderId: ID, id: ID, name: String, username: String, uuid: String): User!
  generateThumbnails(folderId: ID): Boolean!
  generateZip(folderId: ID): String!
}

enum PrimaryColor {
  blue
  cyan
  dark
  grape
  gray
  green
  indigo
  lime
  orange
  pink
  red
  teal
  violet
  yellow
}

type Query {
  accessLogs(folderId: ID!, includeChildren: Boolean, userId: ID, userType: UserType): [AccessLog!]!
  admins: [User!]!
  allFolders(id: ID!, limit: Int, sort: FoldersSortType): [Folder]!
  brandings: [Branding!]!
  clientInfo: ClientInfo
  comments(fileId: ID, folderId: ID): [Comment!]!
  file(id: ID!): FileInterface!
  folder(id: ID!): Folder!
  me: User
  searchFiles(folderId: ID, query: String!): [File!]!
  searchFolders(folderId: ID, query: String!): [Folder!]!
  serverInfo: ServerInfo
  tasks(folderId: ID): [Task!]!
  user(id: ID!): User!
  users(folderId: ID!, includeChildren: Boolean, includeParents: Boolean, sortByRecent: Boolean): [User!]!
}

type ServerInfo {
  cacheSize: BigInt!
  canWrite: Boolean!
  databaseUrl: String!
  dev: Boolean!
  host: String!
  latest: String!
  mediaSize: BigInt!
  usePolling: Boolean!
  version: String!
}

type Task {
  folder: Folder
  id: ID
  name: String!
  startTime: String
  status: String
  step: Int
  totalSteps: Int
}

enum ThemeMode {
  auto
  dark
  light
}

type User {
  commentPermissions: CommentPermissions
  enabled: Boolean
  folder: Folder
  folderId: ID!
  gravatar: String
  id: ID
  lastAccess: DateTime
  name: String
  ntfy: String
  userType: UserType
  username: String
  uuid: String
}

enum UserType {
  Admin
  All
  Link
  User
}

type Video implements FileInterface {
  duration: Float
  fileHash: String!
  fileLastModified: DateTime!
  fileSize: BigInt!
  flag: FileFlag
  folder: Folder
  folderId: ID!
  id: ID!
  imageRatio: Float
  latestComment: DateTime
  metadata: VideoMetadataSummary
  name: String!
  rating: Int
  totalComments: Int
  type: FileType!
}

type VideoMetadataSummary {
  AudioCodec: String
  AudioCodecDescription: String
  Bitrate: Int
  Duration: Float
  Format: String
  Framerate: Float
  Height: Int
  VideoCodec: String
  VideoCodecDescription: String
  Width: Int
}